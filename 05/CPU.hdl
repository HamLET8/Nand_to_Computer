// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	And(a = instruction[15] , b = true, out = AorC );   		// alias AorC = instruction[15]	
	Mux( a = true , b = instruction[5] , sel = AorC , out = cA);	// whether output of ALU will  be loaded  in A or D register
	Mux( a = false , b = instruction[4], sel = AorC , out = cD);
	
	DRegister( in = outALU, load = cD , out =outD);				//create D register
	
	Mux16(a[15]= false , a[0..14] = instruction[0..14] , b = outALU, sel = AorC , out = PreA);	//determine outALU or A_instruction

	ARegister( in = PreA, load = cA, out = A , out[0..14] = addressM[0..14]);		//create A register
	
	Mux( a = false , b = instruction[3] , sel = AorC , out = writeM);		// output the writeM by d3

	Mux16(a = A, b = inM , sel = instruction[12] , out = outAM);				// determine A or M by sign a


	ALU( x = outD, y = outAM ,  zx = instruction[11], nx = instruction[10], zy = instruction[9] , ny = instruction[8], f=  instruction[7], no=  instruction[6] , out =outM , out = outALU , zr = zrS, ng = ngS); 				//ALU processing
	Or( a = zrS, b= ngS , out = gtSp);			// z0 n0 g1 create a signal that indicate that the output of ALU is greater than zero 
	Not(in = gtSp , out = gtS);

	And( a = ngS , b =instruction[2] , out = NgS);		// the output of ALU match jump condition
	And( a = zrS ,  b =instruction[1] , out = EqS);
	And( a = gtS , b =instruction[0] , out = GtS );
	
	Or( a= NgS , b = EqS ,out = S1);
	Or( a = S1, b = GtS, out = S2);		//if theJUMP bits have one character that equals 1 match the output of ALU , then S2 = 1
	
	And( a = instruction[0], b =instruction[1] ,out = tempAnd1);		//JMP 111
	And( a=  tempAnd1, b =instruction[2] ,out = JMP);

	Or( a= S2, b= JMP , out = loadPC0);			//JMP or Usua

	Mux( a= false , b = loadPC0 , sel = AorC , out = loadPC);		//whether this instrcution is A or C type , A then no jump condition and no laod
	

	PC( in = A, load = loadPC , inc = true , reset = reset , out[0..14] = pc);
	
}